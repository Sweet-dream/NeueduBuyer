<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "com.neuedu.mapper.EmployeeMapper">
<!-- @刘志杰 -->

	<!-- 使用select对应数据库的查询操作，id配置的是接口的方法名,resultType配置返回数据的类型 -->
	<select id="findAll" resultType="Employee">
	   select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee
	</select>
	
	
	<!-- 从参数中获取数据需要使用#{属性名}，这是类EL表达式语法 -->
	<insert id="add" parameterType="Employee">
		insert into employee(employee_id,employee_account,password,employee_name
		,employee_mobile,department_id)   values(#{employeeId},#{employeeAccount},
	   #{password},#{employeeName},#{employeeMobile},#{departmentId})
	</insert>
	
	
	<!-- 修改需要加上where条件，否则会修改整表的数据 -->
	<update id="update" parameterType="Employee">
		update employee set employee_account=#{employeeAccount},password=#{password},employee_name=#{employeeName}
		,employee_mobile=#{employeeMobile},department_id=#{departmentId}    where employee_id=#{employeeId}
	</update>
	
	
	<!-- 删除数据需要加上where条件，否则会删除整表数据 -->
	<delete id="deleteByEmployeeId" parameterType = "String">
		delete from employee where employee_id = #{employeeId}
	</delete>
	
	
	<delete id="deleteByDepartmentId" parameterType = "int">
		delete from employee where department_id = #{departmentId}
	</delete>
	
	<!-- 查询配置可以同时有参数和返回结果 -->
	<select id = "findByEmployeeId" parameterType = "String" resultType = "Employee">
		select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee where employee_id=#{employeeId}
	</select>
	
	
	<select id = "findByEmployeeAccount" parameterType = "String" resultType = "Employee">
		select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee where employee_account=#{employeeAccount}
	</select>
	
	<select id = "findByEmployeeMobile" parameterType = "String" resultType = "Employee">
		select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee where employee_mobile=#{employeeMobile}
	</select>
	
	<select id = "findByEmployeeName" parameterType = "String" resultType = "Employee">
		select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee where employee_name=#{employeeName}
	</select>
	
	
	<select id = "findByDepartmentId" parameterType = "int" resultType = "Employee">
		select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee where department_id=#{departmentId}
	</select>
	
	
	<!-- 统计查询，查询数据库表的总记录数 -->
	<select id="findTotal" resultType = "int">
		select count(employee_id) from employee
	</select>
	
	
	<!-- mysql的分页使用limit 起始记录查询条数 -->
	<select id="findByPager" parameterType="Pager" resultType="employee">
		select employee_id as 'employeeId' ,employee_account as 'employeeAccount' ,password,employee_name as 'employeeName', 
	   employee_mobile as 'employeeMobile' ,department_id as 'departmentId' from employee limit #{startIndex}, #{size}
	</select>
	
	
</mapper>
	